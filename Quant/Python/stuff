"""        U, s, V = np.linalg.svd(H)
        print("V:")
        print(V)
        print("\n\n\n")
        print(s)

        D = np.zeros([11, 11])

        VD = np.dot(V, s)

        cnt = 0
        # print("Hsize = ", H.size)
        for i in range(11):
            D[i][i] = s[i]

        print("V:")

        for i in range(11):
            for j in range(11):
                print("%.3f" % V[i, j], end=" ")
                cnt += 1
            print()

        print("D:")
        # print(D)
    
        for i in range(11):
            for j in range(11):
                print("%.3f" % D[i, j], end=" ")
                cnt += 1
            print()
        """

print("\033[1;36;1m n:\033[1;32;0m", self.n)

def print_error(err_msg, cf):
    filename = getframeinfo(cf).filename

    print("\033[1;31;1mError:\033[1;32;0m", end=" ")
    print(err_msg, end="\n\n")

    print("\033[1;33;1mFile:\033[1;32;0m", end=" ")
    print("\"", filename, "\"", sep="")

    print("\033[1;33;1mLine:\033[1;32;0m", end=" ")
    print(cf.f_lineno)

    print()

    return







BIPARTITE/UNITARY
# -------------------------------------------------------------------------------------------------
def D(ro_1, ro_2, precision=1e-10):  # Следовая метрика (trace distance)
    # -------------------------------------------
    # D(ro, sigma) = 0.5 * tr(|ro - sigma|)
    # D(ro, sigma) = 0, когда ro = sigma
    # -------------------------------------------
    # d_ro = ro_1 - ro_2
    # d_ro_H = d_ro.getH()

    # d_ro_abs = lg.fractional_matrix_power(d_ro_H.dot(d_ro), 0.5)

    # if np.any(abs(d_ro_abs.dot(d_ro_abs) - d_ro_H.dot(d_ro)) > precision):
    #     print(d_ro_abs)
    #     print(d_ro_H)
    #     exit(0)

    # return 0.5 * abs(np.trace(d_ro_abs))
    # -------------------------------------------
    d_ro = ro_1 - ro_2
    d_ro_H = d_ro.getH()

    tr = np.trace(lg.fractional_matrix_power(d_ro_H.dot(d_ro), 0.5))

    return 0.5 * abs(tr)
# -----------------------------------------------


# -----------------------------------------------
def D_HS(ro_1, ro_2):  # Метрика Гильберта-Шмидта (Hilbert-Schmidt distance)
    # D(ro, sigma) = 0.5 * tr(|ro - sigma|)
    # D(ro, sigma) = 0, когда ro = sigma
    d_ro = ro_1 - ro_2

    # return sqrt(abs(np.trace(ro_1 - ro_2) ** 2))
    return sqrt(abs(np.trace(d_ro.dot(d_ro))))
# -----------------------------------------------


# -------------------------------------------------------------------------------------------------
def Fidelity(ro_sqrt, sigma):  # Ulmann
    # ro_sqrt = lg.sqrtm(ro)
    #sigma_sqrt = lg.fractional_matrix_power(sigma, 0.5)
    # sigma_sqrt = lg.sqrtm(sigma, disp=False)
    # print(sigma_sqrt)
    # exit(1)
    # ro_sqrt_sigma_sqrt = ro_sqrt.dot(sigma_sqrt)
    # fid_matrix = lg.fractional_matrix_power(
    #    sigma_sqrt.dot(ro).dot(sigma_sqrt), 0.5)

    fid_matrix = lg.fractional_matrix_power(
        ro_sqrt.dot(sigma).dot(ro_sqrt), 0.5)

    # return 0.5 *
    # np.trace(lg.sqrtm(ro_sqrt_sigma_sqrt.dot(ro_sqrt_sigma_sqrt)))
    return np.trace(np.abs(fid_matrix))
    # return np.abs(np.trace(fid_matrix))
# -------------------------------------------------------------------------------------------------


# U, s, V = np.linalg.svd(H.matrix.data)
        # print("V:")
        # print(V)
        # print("\n\n\n")
        # print("dt = ", dt)
        # print("s:\n", s)
        # exit(1)